global:
  namespace: "gravity-cloud"
  storageClass: "standard"
  nodeSelector: []

components:
  gravityAgent:
    deployment:
      name: gravity-ci-cd-agent
      replicas: 1
      image:
        repository: gravitycloud/gravity-ci-cd-agent
        tag: latest
        pullPolicy: Always
      resources:
        requests:
          memory: "512Mi"
          cpu: "512m"
        limits:
          memory: "8192Mi"
          cpu: "4000m"
      env:
        GRAVITY_API_KEY:
          valueFrom:
            secretKeyRef:
              name: gravity-agent-secrets
              key: gravity-api-key
        GITHUB_TOKEN:
          valueFrom:
            secretKeyRef:
              name: gravity-agent-secrets
              key: github-token
        AWS_ACCESS_KEY_ID:
          valueFrom:
            secretKeyRef:
              name: gravity-agent-secrets
              key: aws-access-key-id
        AWS_SECRET_ACCESS_KEY:
          valueFrom:
            secretKeyRef:
              name: gravity-agent-secrets
              key: aws-secret-access-key
        POSTGRES_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgres-password
        REDIS_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: redis-password
        ARGOCD_TOKEN:
          valueFrom:
            secretKeyRef:
              name: gravity-agent-secrets
              key: argo-cd-token
        ENV: "production"
        NAMESPACE: "gravity-cloud"
        GITHUB_REPOSITORIES: ""
        GIT_BRANCHES_ALLOWED: ""
        GITHUB_JOB_NAME: ""
        AWS_ACCOUNT_ID: ""
        POSTGRES_HOST: "postgres-gravity-service"
        POSTGRES_USER: ""
        POSTGRES_DB: ""
        POSTGRES_PORT: "5432"
        REDIS_HOST: "redis-gravity-service"
        REDIS_PORT: "6379"
        SLACK_WEBHOOK_URL: ""
        ARGOCD_URL: ""
        DOCKER_REGISTRY_URL: ""
        DOCKER_REGISTRY_PORT: "5000"
        CUSTOM_SECRETS: ""
    service:
      name: gravity-agent-service
      type: ClusterIP
      port: 8080
      targetPort: 8080

  postgres:
    deployment:
      name: postgres-gravity
      replicas: 1
      image:
        repository: postgres
        tag: latest
        pullPolicy: IfNotPresent
      resources:
        requests:
          memory: "1Gi"
          cpu: "500m"
        limits:
          memory: "2Gi"
          cpu: "1000m"
      env:
        POSTGRES_DB: ""
        POSTGRES_USER: ""
        POSTGRES_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: postgres-password
      volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
          subPath: postgres
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-gravity-pvc
    service:
      name: postgres-gravity-service
      type: ClusterIP
      port: 5432
      targetPort: 5432

  redis:
    deployment:
      name: redis-gravity
      replicas: 1
      image:
        repository: redis
        tag: latest
        pullPolicy: IfNotPresent
      command:
        - "/bin/sh"
        - "-c"
        - "redis-server --requirepass $(REDIS_PASSWORD)"
      resources:
        requests:
          memory: "256Mi"
          cpu: "250m"
        limits:
          memory: "512Mi"
          cpu: "500m"
      env:
        REDIS_PASSWORD:
          valueFrom:
            secretKeyRef:
              name: redis-secrets
              key: redis-password
      volumeMounts:
        - name: redis-data
          mountPath: /data
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-gravity-pvc
    service:
      name: redis-gravity-service
      type: ClusterIP
      port: 6379
      targetPort: 6379

  dockerregistry:
    deployment:
      name: gravity-docker-registry
      replicas: 1
      image:
        repository: registry
        tag: "2"
        pullPolicy: IfNotPresent
      resources:
        requests:
          memory: "512Mi"
          cpu: "512m"
        limits:
          memory: "4096Mi"
          cpu: "4000m"
      env:
        REGISTRY_STORAGE_DELETE_ENABLED: "true"
      volumeMounts:
        - name: registry-data
          mountPath: /var/lib/registry
      volumes:
        - name: registry-data
          persistentVolumeClaim:
            claimName: agent-gravity-pvc
    service:
      name: gravity-docker-registry
      type: ClusterIP
      port: 5000
      targetPort: 5000

# RBAC Configuration
rbac:
  serviceAccount:
    name: gravity-job-agent-sa
    create: true
  clusterRole:
    name: gravity-job-agent-role
    rules:
      - apiGroups: [""]
        resources:
          [
            "pods",
            "pods/log",
            "pods/exec",
            "services",
            "secrets",
            "configmaps",
            "persistentvolumeclaims",
            "serviceaccounts",
          ]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: [""]
        resources: ["secrets", "events", "namespaces"]
        verbs: ["get", "list", "watch"]
      - apiGroups: ["apps"]
        resources: ["deployments", "statefulsets", "replicasets"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: ["batch"]
        resources: ["jobs", "jobs/status"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: ["networking.k8s.io"]
        resources: ["ingresses", "networkpolicies"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: ["rbac.authorization.k8s.io"]
        resources: ["roles", "rolebindings"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: ["policy"]
        resources: ["podsecuritypolicies", "poddisruptionbudgets"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
      - apiGroups: ["argoproj.io"]
        resources: ["applications"]
        verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
  clusterRoleBinding:
    name: gravity-job-agent-rolebinding

persistence:
  postgres:
    name: postgres-gravity-pvc
    size: "1Gi"
    accessMode: ReadWriteOnce
  redis:
    name: redis-gravity-pvc
    size: "1Gi"
    accessMode: ReadWriteOnce
  agent:
    name: agent-gravity-pvc
    size: "20Gi"
    accessMode: ReadWriteOnce

secrets:
  gravityAgent:
    name: gravity-agent-secrets
    data:
      gravity-api-key: ""
      github-token: ""
      aws-access-key-id: ""
      aws-secret-access-key: ""
      argo-cd-token: ""
  postgres:
    name: postgres-secrets
    data:
      postgres-password: ""

  redis:
    name: redis-secrets
    data:
      redis-password: ""
